ext {
    var = 29
    var1 = '3.0'
}/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/tutorial_java_projects.html
 */
// Apply the java plugin to add support for Java
apply plugin: 'com.android.application'

/**
 * The android block is where you configure all your Android-specific
 * build options.
 */
android {
    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    signingConfigs {
    }
    compileSdkVersion 29
    /**
     * buildToolsVersion specifies the version of the SDK build tools, command-line
     * utilities, and compiler that Gradle should use to build your app. You need to
     * download the build tools using the SDK Manager.
     *
     * If you're using Android plugin 3.0.0 or higher, this property is optionalâ€”
     * the plugin uses a recommended version of the build tools by default.
     */
    buildToolsVersion '29.0.2'
    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */
    defaultConfig {

        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */

        applicationId "com.scratch"

        // Defines the minimum API level required to run the app.
        minSdkVersion var

        // Specifies the API level used to test the app.
        targetSdkVersion 28

        // Defines the version number of your app.
        versionCode 1

        // Defines a user-friendly version name for your app.
        versionName "1.0"
    }
    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies Proguard settings and is not signed by default.
     */
    buildTypes {

        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the Proguard settings file.
         */

        release {
            minifyEnabled true // Enables code shrinking for the release build type.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    /**
     * The productFlavors block is where you can configure multiple product
     * flavors. This allows you to create different versions of your app that can
     * override the defaultConfig block with their own settings. Product flavors are
     * optional, and the build system does not create them by default. This example
     * creates a free and paid product flavor. Each product flavor then specifies
     * its own application ID, so that they can exist on the Google Play Store, or
     * an Android device, simultaneously.
     *
     * If you're using Android plugin 3.0.0 or higher, you need to also declare
     * and assign each flavor to a flavor dimension. To learn more, read the
     * migration guide.
     */
    flavorDimensions 'free'
    productFlavors {
        free {
            dimension 'free'
            minSdkVersion 26
            applicationId 'com.scratch'
            targetSdkVersion 28
            versionCode 1
            versionName '1.0'
        }
    }
    /**
     * The splits block is where you can configure different APK builds that
     * each contain only code and resources for a supported screen density or
     * ABI. You'll also need to configure your build so that each APK has a
     * different versionCode.
     */
    splits {
        // Settings to build multiple APKs based on screen density.
        density {

            // Enable or disable building multiple APKs.
            enable false

            // Exclude these densities when building multiple APKs.
            exclude "ldpi", "tvdpi", "xxxhdpi", "400dpi", "560dpi"
        }
    }
}
/**
 * The dependencies block in the module-level build configuration file
 * only specifies dependencies required to build the module itself.
 *
 * If you're using Android plugin 3.0.0 or higher, you should
 * use the new dependency configurations, which help you improve build speeds by
 * restricting which dependencies leak their APIs to other modules.
 */
dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    //implementation 'com.google.android.material:material:1.1.0-alpha08'
}

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41"
    }
}
allprojects {
    repositories {
        google()
        jcenter()
    }
}